const id = x => x;
const mightFail = x => {
    return x <= 0 ? 1 : 2(3);
}
const guardFail = x => {
    return (y => y) + x ? 1 : 2;
}
const willFail = x => {
    return x <= 0 ? (0 <= 0 ? 0(0) : 0(0)) : id + id; 
}
const mgw = mightFail(guardFail(willFail));
const gmw = guardFail(mightFail(willFail));
const wgm = willFail(guardFail(mightFail));
const mNum = mightFail(0-1);
const gNum = guardFail(0); 
const wNum = willFail(0);  
Solution
	id : (Num -> Num)
	mightFail : (Comp(Num) -> Num)
	guardFail : ((Comp(Num) -> (Num -> Num)) -> Comp(Ok))
	willFail : (Comp(Num) -> (Num -> Num))
	mgw : Comp(Ok)
	gmw : Ok
	wgm : Ok
	mNum : Ok
	gNum : Ok
	wNum : Ok
Solution
	id : (Comp(Ok) -> Num)
	mightFail : (Comp(Ok) -> Comp(Ok))
	guardFail : ((Num -> Comp(Ok)) -> Comp(Ok))
	willFail : (Num -> Comp(Ok))
	mgw : Comp(Ok)
	gmw : Ok
	wgm : Ok
	mNum : Ok
	gNum : Ok
	wNum : Comp(Ok)
Solution
	id : (Comp(Ok) -> Num)
	mightFail : ((Num -> Comp(Ok)) -> Comp(Ok))
	guardFail : ((Num -> Comp(Ok)) -> Comp(Ok))
	willFail : (Num -> Comp(Ok))
	mgw : Comp(Ok)
	gmw : Comp(Ok)
	wgm : Ok
	mNum : Ok
	gNum : Ok
	wNum : Comp(Ok)
Solution
	id : (Comp(Ok) -> Num)
	mightFail : (Ok -> Ok)
	guardFail : (Ok -> Comp(Ok))
	willFail : (Num -> Comp(Ok))
	mgw : Comp(Ok)
	gmw : Comp(Ok)
	wgm : Comp(Ok)
	mNum : Ok
	gNum : Ok
	wNum : Comp(Ok)
Solution
	id : (Comp(Ok) -> Num)
	mightFail : (Ok -> Ok)
	guardFail : (Ok -> Comp(Ok))
	willFail : (Num -> Comp(Ok))
	mgw : Comp(Ok)
	gmw : Comp(Ok)
	wgm : Comp(Ok)
	mNum : Ok
	gNum : Comp(Ok)
	wNum : Comp(Ok)
Ill-typed and fails at: mgw,gmw,wgm,gNum,wNum
